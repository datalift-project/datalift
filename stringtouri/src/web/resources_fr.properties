# Contenu textuel français pour l'IHM du module de conversion StringToURI.
# ============================================================================
# Contenus textuels principaux.
stringtouri.title       = StringToURI
stringtouri.button      = Transformation des Strings en URIs
stringtouri.description = StringToURI est un module d'interconnexion qui remplace des valeurs littérales par les URIs des entités décrites par ces valeurs. Par exemple, pour un triplet &lt;http://example.org/personne/Bob&gt; ex:vitEn "France", on pourrait souhaiter que la chaîne de caractères "France" soit remplacée par une URI vers l'entité de classe Pays correspondant à la valeur "France". À l'issue du processus d'interconnexion de StringToURI, on aura ainsi : &lt;http://example.org/personne/Bob&gt; ex:vitEn &lt;http://example.org/pays/France&gt;.
stringtouri.example     = Pour illustrer le fonctionnement de StringToURI, voici un exemple. Un annuaire de services libère ses données et souhaite les lifter : elles gagneraient à être interconnectées à un jeu de données géographiques pour faciliter leur réutilisation, donnant ainsi plus de visibilité aux services référencés par l'annuaire. Les données ont au préalable été transformées en RDF et modélisées avec une ontologie simple créée pour l'occasion. Les données de référence, dont on récupèrera le contenu, sont choisies pour leur qualité et leur autorité.
#
# ============================================================================
# Labels génériques.
project.label   = Projet {0}
update.confirm  = La modification des données sera permanente.
send.label 			= Go !
help.label      = Aide
help.title      = Afficher l'aide
example.label   = Exemple 
example.title   = Afficher un exemple
cancel.label    = Annuler
cancel.title    = Retour à l' 
back.label      = Retour
back.title      = Retour au formulaire
modified.label  = Données à modifier
reference.label = Données de référence
#
convert.title   = Méthode de mise à jour
preview.label   = Prévisualisation
preview.title   = Prévisualiser les modifications (aucune MAJ)
overwrite.label = Écraser
overwrite.title = Modifier les données (les anciennes données seront écrasées)
new.label       = Nouveau prédicat
new.title       = Créer un nouveau prédicat nommé avec l'ancien suivi de _URI pour les nouvelles valeurs (pas de changements à l'ancien)
#
warning.label               = Attention
warning.info                = Ce module nécessite que JavaScript soit activé pour pouvoir fonctionner correctement.
#
# ============================================================================
# Éléments du formulaire.
dataset.label            = Nom du jeu
dataset.info.target      = Nom du jeu de données à modifier
dataset.help.target      = Ce jeu de données Datalift est celui que l'on souhaite modifier. Les nouvelles valeurs proviendront du jeu référence.
dataset.example.target   = Les données que l'on souhaite interconnecter proviennent ici de l'annuaire de services de transport PASSIM (http://www.passim.info/). Ce jeu de données a au préalable été converti en RDF en utilisant une ontologie ad-hoc et est maintenant prêt à être interconnecté.
dataset.holder.target    = {0}/source/extrait-passim
dataset.info.source      = Nom du jeu de données référence 
dataset.help.source      = Ce jeu de données nous sert de référence pour nos modifications. On en extrait les données à recopier dans l'autre jeu.
dataset.example.source   = Ici, les données référence seront extraites d'une source sûre : le COG (Code Officiel Géographique) de l'INSEE (http://rdf.insee.fr/geo/). Disponibles en ligne, ces données ont simplement été importées dans la plateforme.
dataset.holder.source    = {0}/source/insee-departements
#
class.label              = Classe à utiliser
class.info.target        = Classe du prédicat à modifier
class.help.target        = Cette classe permet de filtrer sur quelles entités vont se porter les modifications si le prédicat à utiliser est partagé par plusieurs classes d'entités.
class.example.target     = L'ontologie utilisée pour PASSIM étant encore à l'étape de développement, aucune classe n'existe et nous n'avons donc pas besoin d'en préciser pour effectuer notre interconnexion.
class.holder.target      = &nbsp;
class.info.source        = Classe du prédicat à utiliser
class.help.source        = Cette classe permet de filtrer de quelles entités on explorera les prédicats si le prédicat référence est partagé par plusieurs classes d'entités.
class.example.source     = L'ontologie utilisée par le COG, elle, est complète, et chaque entité géographique a sa propre classe. Nous allons limiter notre comparaison de données aux départements (classe Departement).
class.holder.source      = http://rdf.insee.fr/geo/Departement
#
predicate.label          = Prédicat à comparer
predicate.info.target    = Prédicat des objets à modifier
predicate.help.target    = Ce prédicat est celui dont on va modifier les valeurs. Chaque valeur pré-traitement va être comparée à celles du prédicat référence et mise à jour en cas d'égalité.
predicate.example.target = Actuellement, notre prédicat department ne contient que des noms de départements. Le fait de remplacer cette valeur littérale par une URI vers une entité permet de créer des liens entre nos données, et celles qui existent déjà : celles du COG, ou bien celles d'autres jeux utilisant aussi le COG.
predicate.holder.target  = http://data.lirmm.fr/ontologies/passim#department
predicate.info.source    = Prédicat des objets à utiliser
predicate.help.source    = Ce prédicat sert de référence: si l'une de ses valeurs est présente dans le jeu à modifier, alors elle sera remplacée par l'URI de l'entité reliée à la valeur en question.
predicate.example.source = La classe Departement, modélisant des divisions administratives françaises "départements", stocke le nom de chaque entité dans le prédicat nom. C'est donc ici que seront recherchées les valeurs à comparer.
predicate.holder.source  = http://rdf.insee.fr/geo/nom
#
field.mandatory       = Obligatoire
field.optional        = Optionnel
field.example         = Exemple
field.none            = Aucune
#
# ============================================================================
# Éléments de tableau.
result.title            = Nouveaux triplets créés par
source.grid.row.heading = #
rdf.voc.subject         = Sujet
rdf.voc.predicate       = Prédicat
rdf.voc.object          = Objet
#
# ============================================================================
# Erreurs de validation.
error.title             = Oh non !
error.label             = Erreur
#
error.samedatasets      = Les deux jeux de données doivent être différents.
error.datasetnotfound   = Ce jeu de données n'existe pas dans
error.classnotfound     = Cette classe n'existe pas dans
error.predicatenotfound = Ce prédicat n'existe pas dans
#
# ============================================================================
# Wizard.
wizard.settings.label = Réglages
wizard.preview.label = Avant-première
wizard.save.label = Enregistrer
#
# ============================================================================
# Table Pager.
pager.of.label = de
pager.items.label = éléments 
pager.page.label = page
pager.perPage.label = par page
#
# ============================================================================
# Interlink predicate form.
interlink.predicate.label = Prédicat tripler connexes
interlink.predicate.placeholder = Modifier le prédicat des nouveaux triples

