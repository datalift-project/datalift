# English textual content for the StringToURI converter module GUI.
# ============================================================================
# Principal textual content.
stringtouri.title       = StringToURI
stringtouri.button      = String to URI Transform
stringtouri.description = StringToURI is an interconnection module which replaces literal values by the URIs to the entities which they describe. For example, for a given triple &lt;http://example.org/person/Bob&gt; ex:livesIn "France", we might want to replace the string value "France" by a URI to the RDF entity of class Country corresponding to the "France" value. At the end of the StringToURI interconnection process, we'll obtain : &lt;http://example.org/person/Bob&gt; ex:livesIn &lt;http://example.org/countries/France&gt;.
stringtouri.example     = To illustrate StringToURI's workflow, here is an example. A services directory opens its data and wants to lift them: they would benefit from being interlinked to a geographical dataset to facilitate reuse, granting referenced services much more visibility. The data has been transformed to RDF before using StringToURI and organized with a simple custom made ontology. Reference data, which we'll extract information from, is chosen for its quality and authority.
#
# ============================================================================
# Generic labels.
project.label   = {0} Project
update.confirm  = The data will be modified permanently.
send.label 			= Go !
help.label      = Help
help.title      = Show the help menu
example.label   = Example
example.title   = Display an example
cancel.label    = Cancel
cancel.title    = Go back to the 
back.label      = Go back
back.title      = Go back to the form
modified.label  = Data to be modified
reference.label = Data to use as reference
#
convert.title   = Update method
preview.label   = Preview
preview.title   = Just preview modifications (no changes)
overwrite.label = Overwrite 
overwrite.title = Modify the data permanently (the data will be overwritten)
new.label       = New predicate
new.title       = Add the data to a new predicate named after the old one followed by "_URI" (no changes to the old predicate).
#
warning.label               = Warning
warning.info                = This module requires JavaScript to be enabled in order to work properly.
#
# ============================================================================
# Form elements.
dataset.label            = Dataset name
dataset.info.target      = Name of the to be modified dataset
dataset.help.target      = This Datalift dataset is the one we want to be updated. The new values will come from the reference dataset.
dataset.example.target   = The data we want ton interlink are from the PASSIM transport services directory (http://www.passim.info/). This dataset has been transformed to RDF using a ad-hoc ontology beforehand and is now ready to be interlinked.
dataset.holder.target    = {0}/source/extrait-passim
dataset.info.source      = Name of the reference dataset
dataset.help.source      = This dataset is our modifications' reference. We extract its data to copy it to the target dataset.
dataset.example.source   = Here, reference data are extracted from a reliable source: the COG (Official Geographical Code) from french's INSEE (http://rdf.insee.fr/geo/). Available online, those data were just loaded into our platform.
dataset.holder.source    = {0}/source/insee-departements
dataset.project.label 	 = Dataset project 
#
class.label              = Class to use
class.info.target        = Name of the to be modified predicate's class
class.help.target        = This class helps filtering entities for which we will update data if the predicate to be used is shared between multiple entity classes.
class.example.target     = The PASSIM ontology being still a work in progress, there are no classes therefore we don't need to indicate one here to get our interlinking done.
class.holder.target      = &nbsp;
class.info.source        = Name of the reference predicate's class
class.help.source        = This class helps filtering from which entities we will explore predicates if the reference predicate is shared between multiple entity classes.
class.example.source     = The COG ontology, however, is complete, and every geographical resource has its own class. We'll limit our data matching to departments (Departement class).
class.holder.source      = http://rdf.insee.fr/geo/Departement
#
predicate.label          = Predicate to match
predicate.info.target    = To be modified objects' predicate
predicate.help.target    = This predicate to be updated. Each pre-process value is going to be matched to those of the reference predicate and updated if matches are found.
predicate.example.target = At the moment, our department predicate only contains department names. To replace this literal value by an URI identifying an entity creates links between our data and the pre-existent datasets: those of COG, or those of other datasets which also use COG.
predicate.holder.target  = http://data.lirmm.fr/ontologies/passim#department
predicate.info.source    = Reference objects' predicate
predicate.help.source    = This is the reference predicate: if one of its values is inside the target dataset, then it will be replaced by the entities' URI for the given value.
predicate.example.source = The Departement class, representing french administratical divisions "d√©partements", stores the name of each entity in the "nom" predicate. Therefore it's here that we'll look for values to match.
predicate.holder.source  = http://rdf.insee.fr/geo/nom
#
sparql-endpoint.label 	 = Sparql Endpoint 
#
field.mandatory       = Required
field.optional        = Optional
field.example         = Exemple
field.none            = None
#
# ============================================================================
# Table elements
result.title            = New triples created by
source.grid.row.heading = #
rdf.voc.subject         = Subject
rdf.voc.predicate       = Predicate
rdf.voc.object          = Object
#
# ============================================================================
# Validation errors.
error.title             = Oh snap !
error.label             = Error
#
error.samedatasets      = The two datasets must be different.
error.datasetnotfound   = This dataset does not exist in
error.classnotfound     = This class does not exist in
error.predicatenotfound = This predicate does not exist in
#
# ============================================================================
# Wizard.
wizard.settings.label = Settings
wizard.preview.label = Preview
wizard.save.label = Save
#
# ============================================================================
# Table Pager.
pager.of.label = of
pager.items.label = items
pager.page.label = page
pager.perPage.label = per page
#
# ============================================================================
# Interlink predicate form.
interlink.predicate.label = Interlinked triples predicate
interlink.predicate.placeholder = Edit the predicate of the new triples
#
# ============================================================================
# New source form
new-source.name.label = Source Name
new-source.target-uri.label = Target URI
new-source.description.label = Source Description
new-source.description.placeholder = Enter the description of the new source
new-source.keep-values.label = Keep the string value triples?
new-source.source-name-taken.message = Warning: this name has already been taken for another source 
new-source.source-uri-taken.message = Warning: this URI is not available  
