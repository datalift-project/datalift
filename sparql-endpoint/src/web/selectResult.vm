<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
#load("sparql/resources")
#load_core_resources
	<title>#i18n("sparql.query.results") - #i18n("sparql.endpoint.title") - DataLift</title>
#css_links
#header_links
</head>
<body>
#h_tetiere
	<div style="position:absolute;top:15px;right:15px;">
		<a href="${baseUri}/sparql" id="goto_sparql" class="button">#i18n("sparql.endpoint.link")</a>
#if( ${securityCtx.userAuthenticated} )
		<a href="${baseUri}/project" id="goto_workspace" class="button">#i18n("project.workspace.link")</a>
#end
	</div>
	<div id="content" class="ui-widget-content dl-main-panel">
		<h3 id="resulttitle" class="ui-widget-header dl-widget-header">#i18n("sparql.query.full")</h3>
		<div id="results" class="dl-result-panel">
			<table id="queryresults" style="width:100%">
				<thead>
					<tr>
#foreach( $c in $it.Columns ) <th>$esc.html($c)</th> #end
					</tr>
				</thead>
				<tbody>
#foreach( $item in $it )
					<tr>
	#foreach( $c in $it.Columns )
		#set( $value = false ) ## Preset local variable to force next assignment in all cases.
		#set( $value = $!{item.getValue($c).toString()} )
		#if( ${value.startsWith("http://")} || ${value.startsWith("https://")} )
						<td><a href="${baseUri}/sparql/describe?uri=$esc.url($value)&default-graph-uri=$!esc.url($repository)">$esc.html(${value})</a></td>
		#else
						<td>$esc.html(${value})</td>
		#end
	#end
					</tr>
#end
				</tbody>
			</table>
			<div id="pagernav"></div>
		</div>
		<div id="searchnav" style="display:none">
			#i18n("grid.search.value.label") <input type="search" id="gridsearch" placeholder="#i18n("grid.search.value.placeholder")" results="0" class="gridsearch"/>
			#i18n("grid.search.column.label") <select id="searchColumn">
				<option value="all">#i18n("grid.search.column.option.all")</option>
#foreach( $c in $it.Columns )
				<option>$esc.html($c)</option>
#end
			</select>
		</div>
	</div>
#h_footer

#script_links
	<script type="text/javascript">
		var gridData = new Array();
		var searchData = new Array();

		$(document).ready(function() {
			jQuery.extend(jQuery.jgrid.defaults, {
				pager: $('#pagernav'),
				caption: $('#searchnav').html(),
				rowNum: 500,
				rowList:[50,100,200,500,1000,2000],
				height: 450,
				search:{
					caption: "#i18n("grid.search.value.label")"
				}
			});
			if ($("#queryresults tbody tr").length >= ${max}) {
				var maxLimitTitle = " #if( $min > 0 )#if( $max > 0 )#i18n("results.interval",${min},${max})#else#i18n("results.last",${min})#end#else#if( $max > 0)#i18n("results.first",${max})#end#end";
				$("#resulttitle").append(maxLimitTitle);
			}
			$("#goto_sparql").button();
			$("#goto_workspace").button();
			tableToGrid("#queryresults", { datatype: "local" });

			$("#queryresults").trigger("reloadGrid");
			$("#results").show();
			$("#queryresults").setGridWidth($("#results").width());

			gridData = $("#queryresults").getRowData();
			// Function called when modifying search text
			$("#gridsearch").keyup(function () {
				gridSearch($(this).val().toLowerCase());
			});
			// Function called when modifying search Column
			$("#searchColumn").change(function() {
				gridSearch($("#gridsearch").val().toLowerCase());
			});
		});

		function gridSearch(searchString) {
			searchData = [];
			if ($("#searchColumn").val() == "all") {
				searchAllColumns(searchString);
			}
			else {
				searchOneColumn(searchString, $("#searchColumn").val());
			}
			$("#queryresults").jqGrid('clearGridData', true);
			$("#queryresults").jqGrid('setGridParam',{data:searchData}).trigger("reloadGrid");
		}

		function searchAllColumns(searchString) {
			var c = 0;
			for (var i = 0; i < gridData.length; i++) {
				var found = false;
				for (property in gridData[0]) {
					var toCmp = eval("gridData[i]." + property);
					if (!found && toCmp.toLowerCase().indexOf(searchString) != -1) {
						searchData[c] = gridData[i];
						c++;
						found = true;
					}
				}
			}
		}

		function searchOneColumn(searchString, searchColumn) {
			var c = 0;
			for (var i = 0; i < gridData.length; i++) {
				var toCmp = eval("gridData[i]." + searchColumn);
				if (toCmp.toLowerCase().indexOf(searchString) != -1) {
					searchData[c] = gridData[i];
					c++;
				}
			}
		}
	</script>
</body>
</html>
