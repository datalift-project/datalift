<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
#load("sparql/resources")
#load_core_resources
	<title>#i18n("sparql.query.results") - #i18n("sparql.endpoint.title") - DataLift</title>
#header_links
</head>
<body>
<<<<<<< HEAD
#h_tetiere
#if( ${securityCtx.userAuthenticated} )
=======
#banner
>>>>>>> master
	<div style="position:absolute;top:15px;right:15px;">
#if( ${securityCtx.userAuthenticated} )
		<a href="${baseUri}/project" id="goto_workspace" class="button">#i18n("project.workspace.link")</a>
#end
	</div>
	<div id="content" class="ui-widget-content dl-main-panel">
		<h3 class="ui-widget-header dl-widget-header">#i18n("sparql.query.full")</h3>
		<div class="dl-panel">
		    <form id="query_form" action="${baseUri}/sparql" method="get">
#if( ${repositories.size()} > 1 )
			<div class="dl-form-elt">
				<label for="default-graph-uri">#i18n("sparql.repository"): </label>
				<select id="default-graph-uri" name="default-graph-uri">
#foreach( $item in $repositories )
#if( $foreach.count == 1 )
					<option value="$esc.html($!{item.name})" selected="true">#i18n($!{item.label})</option>
#else
					<option value="$esc.html($!{item.name})">#i18n($!{item.label})</option>
#end
#end
				</select>
			</div>
#end
			<span>&nbsp;</span>
			<div id="result_format" class="dl-form-elt">
				<label>#i18n("sparql.parameter.format"): </label>
				<input type="radio" id="html_format" name="format" value="application/json" checked="checked"/><label for="html_format">HTML</label>
				<input type="radio" id="rdf_format" name="format" value="application/sparql-results+xml, application/rdf+xml, text/plain; q=0.5"/><label for="rdf_format">RDF/XML</label>
				<input type="radio" id="turtle_format" name="format" value="text/turtle, text/plain; q=0.5"/><label for="turtle_format">N3/Turtle</label>
				<input type="radio" id="ntriples_format" name="format" value="application/n-triples, text/plain; q=0.5"/><label for="ntriples_format">NTriples</label>
				<input type="radio" id="trig_format" name="format" value="application/x-trig, text/plain; q=0.5"/><label for="trig_format">TriG</label>
				<input type="radio" id="trix_format" name="format" value="application/trix, text/plain; q=0.5"/><label for="trix_format">TriX</label>
				<input type="radio" id="csv_format" name="format" value="text/csv, text/plain; q=0.5"/><label for="csv_format">CSV</label>
				<input type="hidden" id="format_save"/>
			</div>
			<div class="dl-form-elt" style="width: 100%;">
				<p></p>
				<label for="query">#i18n("sparql.query.light"): </label><br />
				<textarea id="query" name="query" spellcheck="false" style="width:100%; min-height:100px;"></textarea></p>
#if( !${queries.isEmpty()} )
				<div id="predef-queries">
					<label>#i18n("sparql.predef.queries"): </label>
#foreach( $q in $queries )
					<button title="$!esc.html($q.description)" query="$!esc.html($q)">$esc.html($q.label)</button> 
#end
				</div>
#end
				<p><label for="max">#i18n("sparql.max.results"): </label>
				<input type="text" name="max" id="max" value="${max}"/></p>
			</div>
			<div class="dl-form-buttons">
				<input type="submit" value="#i18n("sparql.query.execute")" id="query_submit"/>
			</div>
		    </form>
		</div>
		<div id="results" class="dl-result-panel">
			<table id="table_results"><tr><td/></tr></table>
			<div id="pagernav"></div>
		</div>
		<div id="searchnav" style="display:none">
			#i18n("grid.search.value.label") <input type="search" id="gridsearch" placeholder="#i18n("grid.search.value.placeholder")" results="0" class="gridsearch"/>
			#i18n("grid.search.column.label") <select id="searchColumn"></select>
		</div>
	</div>
#h_footer
	<div style="text-align:right;font-style:italic;font-size:0.8em">
		<span style="color:gray">Version @full.app.version@</span>
	</div>

#script_links
	<script type="text/javascript">
		var searchData = new Array();
		var responsePtr;

		function queryUpdate() {
			var disableSelect = true;
			var disableConstruct = true;
			var s = $("#query").val();
			if (s.match(/(^|\s+)(CONSTRUCT|DESCRIBE)\s+/i)) {
				disableConstruct = false;
			}
			if (s.match(/(^|\s+)SELECT\s+/i)) {
				disableSelect = false;
			}
			$("#turtle_format").button("option", "disabled", disableConstruct);
			$("#ntriples_format").button("option", "disabled", disableConstruct);
			$("#trig_format").button("option", "disabled", disableConstruct);
			$("#trix_format").button("option", "disabled", disableConstruct);
			$("#csv_format").button("option", "disabled", disableSelect);
		};

		$(function() {
			$("#query_submit").button();
			$("#goto_workspace").button();
			$("#result_format").buttonset();

			var firstButton = true;
			$("#predef-queries button").each(function(button) {
				$(this).button();
				$(this).click(function() {
					$("#query").val($(this).attr("query"));
					queryUpdate();
					return false;
				});
				if (firstButton) {
					$("#query").val($(this).attr("query"));
					queryUpdate();
					firstButton = false;
				}
			});

			$("#query").keyup(function() {
				queryUpdate();
			});

			$("#query_form").submit(function(e) {
				var fmt = $("input[name=format]:checked").val();
				$("#format_save").val(fmt);
				var requestUrl = $("#query_form").attr("action")
							+ "?" + $("#query").serialize();
#if( ${repositories.size()} > 1 )
				requestUrl += "&" + $("#default-graph-uri").serialize();
#end
				var maxResults = $("#max").val();
				if (! isNaN(maxResults)) {
					requestUrl += "&max=" + parseInt(maxResults);
				}
				if (fmt.match(/json/)) {
					// Prevent the navigator from sending the form
					e.preventDefault();
					// Use async. call to fill result table
					jQuery.ajax({
						beforeSend: function(req) {
							req.setRequestHeader("Accept", fmt);
						},
						type: "GET",
						cache: false,
						url: requestUrl + "&grid=true",
						dataType: "json",
						success: successfulQuery,
						error: unsuccessfulQuery,
					});
				}
				// Else: let the browser send the form request.
			});
		});

		function successfulQuery(response) {
			if ($("#format_save").val() == "application/json") {
				jsonGridSuccessRequest(response);

				// Function called when modifying search text
				$("#gridsearch").keyup(function() {
					gridSearch(response, $(this).val().toLowerCase());
				});
				// Function called when modifying search Column
				$("#searchColumn").change(function() {
					gridSearch(response, $("#gridsearch").val().toLowerCase());
				});
			}
			else {
				alert(response);
			}
		}

		function jsonGridSuccessRequest(response) {
			if (responsePtr) {
				delete responsePtr;
			}
			responsePtr = response;
			// initialize search select
			var options = $('#searchColumn').attr('options');
			options.length = 0;
			options[options.length] = new Option("#i18n("grid.search.column.option.all")", "all", true, true);
			// generating Column Model for jqGrid
			var myColModel = [];
			for (var i = 0; i < response.head.length; i++ ) {
				myColModel[i] = [];
				myColModel[i].name = response.head[i];
				// add row to search select
				options[options.length] = new Option(response.head[i], response.head[i], false, false);
			}
			$("#table_results").GridUnload();
			// initializing jqGrid
			$("#table_results").jqGrid({
				datatype: "local",
				colNames: response.head,
				colModel: myColModel,
				pager: $('#pagernav'),
				data: response.rows,
				caption: $("#searchnav").html(),
				rowNum: 200,
				rowList: [50,100,200,500,1000,2000],
				height: 270,
				search: {
					caption: "#i18n("grid.search.value.label")"
				}
			});
			$("#results").show();
			$("#table_results").setGridWidth($("#results").width());
		}

		function unsuccessfulQuery(xhr, textStatus, errorThrown) {
			var msg = "";
			if ((xhr.readyState == 4) && (xhr.status != 0)) {
				msg = "#i18n("sparql.ajax.query.requestError"):\n"
					+ xhr.status + " [" + errorThrown + "] "
					+ "#i18n("sparql.ajax.query.invalidQuery"):\n"
					+ xhr.responseText;
			}
			else {
				msg = "#i18n("sparql.ajax.query.responseError"):\n["
						+ xhr.readyState + "][" + xhr.status + "] ";
				if (textStatus == 'parsererror') {
					msg += "#i18n("sparql.ajax.query.parseError")";
				}
				else if (textStatus == 'timeout' ) {
					msg += "#i18n("sparql.ajax.query.requestTimeout")";
				}
				else if (textStatus == 'abort' ) {
					msg += "#i18n("sparql.ajax.query.serverAbort")";
				}
				else {
					msg += "#i18n("sparql.ajax.query.browserError"): " + errorThrown.message;
				}
			}
			alert(msg);
		}

		function gridSearch(gridData, searchString) {
			searchData = [];
			if ($("#searchColumn").val() == "all") {
				searchAllColumns(gridData, searchString);
			}
			else {
				searchOneColumn(gridData, searchString, $("#searchColumn").val());
			}
			$("#table_results").jqGrid('clearGridData', true);
			$("#table_results").jqGrid('setGridParam',{data:searchData}).trigger("reloadGrid");
		}

		function searchAllColumns(gridData, searchString) {
			var c = 0;
			for (var i = 0; i < gridData.rows.length; i++) {
				for (var k = 0; k < gridData.head.length; k++) {
					var toCmp = eval("gridData.rows[i]." + gridData.head[k]);
					if (toCmp.toLowerCase().indexOf(searchString) != -1) {
						searchData[c] = gridData.rows[i];
						c++;
						k = gridData.head.length;
					}
				}
			}
		}

		function searchOneColumn(gridData, searchString, searchColumn) {
			var c = 0;
			for (var i = 0; i < gridData.rows.length; i++) {
				var toCmp = eval("gridData.rows[i]." + searchColumn);
				if (toCmp.toLowerCase().indexOf(searchString) != -1) {
					searchData[c] = gridData.rows[i];
					c++;
				}
			}
		}
	</script>
</body>
</html>
